name: CI for Foodgram

on:
  push:
    branches:
      - 'main'

  pull_request:
    branches:
      - 'feature/*'
    types:
      - opened

env:
  CONTAINER_REGISTRY: ghcr.io
  BACKEND_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/backend
  FRONTEND_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/frontend

jobs:
  check_changes:
    name: Check changed files
    outputs:
      current_branch: ${{ steps.get_branch_name.outputs.current_branch }}
      frontend: ${{ steps.check_files.outputs.frontend }}
      backend: ${{ steps.check_files.outputs.backend }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get branch name
        id: get_branch_name
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo "::set-output name=current_branch::${GITHUB_HEAD_REF}"
          else
            branch=${GITHUB_REF}
            prefix='refs/heads/'
            current_branch=${branch#"$prefix"}
            echo "::set-output name=current_branch::${current_branch}"
          fi

      - name: Check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD

          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file; do
            echo $file
            if [[ $file == src/frontend/* ]]; then
              echo "::set-output name=frontend::true"
            elif [[ $file == src/backend/* ]]; then
              echo "::set-output name=backend::true"
            else
              echo "file does not belong to any service"
            fi
          done < files.txt

  tests:
    name: Run tests
    needs: check_changes
    if: needs.check_changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build the Stack
        run: DOCKER_BUILDKIT=1 docker-compose build backend

      - name: Run flake8
        run: docker-compose run --rm backend flake8

      - name: Run mypy
        run: docker-compose run --rm backend mypy .

      - name: Run Django Tests
        run: docker-compose run --user=root --rm backend pytest

      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v3

      - name: Tear down the Stack
        run: docker-compose down

  build_frontend:
    needs: check_changes
    name: Build and deploy frontend image
    if: |
      needs.check_changes.outputs.frontend == 'true' &&
      github.event_name == 'push' &&
      needs.check_changes.outputs.current_branch == 'main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set environment variables
        run: |
          echo "FRONTEND_IMAGE=$(echo ${{env.FRONTEND_IMAGE}} )" >> $GITHUB_ENV

      - name: Pull images
        run: |
          docker pull ${{ env.FRONTEND_IMAGE }} || true

      - name: Build, tag, and push frontend image to Registry
        env:
          CONTAINER: frontend
          IMAGE_NAME: ${{ env.FRONTEND_IMAGE }}
        run: |
          DOCKER_BUILDKIT=1 docker-compose build $CONTAINER
          docker push $IMAGE_NAME

  build_backend:
    needs: [check_changes, tests]
    name: Build and deploy backend image
    if: |
      needs.check_changes.outputs.backend == 'true' &&
      github.event_name == 'push' &&
      needs.check_changes.outputs.current_branch == 'main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set environment variables
        run: |
          echo "BACKEND_IMAGE=$(echo ${{env.BACKEND_IMAGE}} )" >> $GITHUB_ENV

      - name: Pull images
        run: |
          docker pull ${{ env.BACKEND_IMAGE }} || true

      - name: Build and push backend image to Registry
        env:
          CONTAINER: backend
          IMAGE_NAME: ${{ env.BACKEND_IMAGE }}
        run: |
          DOCKER_BUILDKIT=1 docker-compose -f docker-compose.yml -f docker-compose.prod.yml build $CONTAINER
          docker push $IMAGE_NAME
